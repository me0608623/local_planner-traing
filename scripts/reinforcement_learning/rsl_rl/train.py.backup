# Copyright (c) 2022-2025, The Isaac Lab Project Developers (https://github.com/isaac-sim/IsaacLab/blob/main/CONTRIBUTORS.md).
# All rights reserved.
#
# SPDX-License-Identifier: BSD-3-Clause

"""Script to train RL agent with RSL-RL."""

"""Launch Isaac Sim Simulator first."""

import argparse
import sys

from isaaclab.app import AppLauncher

# === 手動註冊 Nova Carter 本地規劃器環境（繞過自動導入問題） ===
import gymnasium as gym

# 手動設置模組路徑
sys.path.insert(0, 'source')

# 預先導入並註冊配置類到全域空間
try:
    sys.path.insert(0, 'source/isaaclab_tasks')
    from isaaclab_tasks.manager_based.navigation.local_planner.local_planner_env_cfg import LocalPlannerEnvCfg
    from isaaclab_tasks.manager_based.navigation.local_planner.agents.rsl_rl_ppo_cfg import LocalPlannerPPORunnerCfg
    print("✅ 配置類預先導入成功")
except Exception as e:
    print(f"⚠️ 直接導入配置類失敗，使用替代方案: {e}")

gym.register(
    id="Isaac-Navigation-LocalPlanner-Carter-v0",
    entry_point="isaaclab.envs:ManagerBasedRLEnv",
    disable_env_checker=True,
    kwargs={
        "env_cfg_entry_point": "isaaclab_tasks.manager_based.navigation.local_planner.local_planner_env_cfg:LocalPlannerEnvCfg",
        "rsl_rl_cfg_entry_point": "isaaclab_tasks.manager_based.navigation.local_planner.agents.rsl_rl_ppo_cfg:LocalPlannerPPORunnerCfg",
    },
)
print("✅ Nova Carter 本地規劃器環境已手動註冊")

# local imports
import cli_args  # isort: skip


# add argparse arguments
parser = argparse.ArgumentParser(description="Train an RL agent with RSL-RL.")
parser.add_argument("--video", action="store_true", default=False, help="Record videos during training.")
parser.add_argument("--video_length", type=int, default=200, help="Length of the recorded video (in steps).")
parser.add_argument("--video_interval", type=int, default=2000, help="Interval between video recordings (in steps).")
parser.add_argument("--num_envs", type=int, default=None, help="Number of environments to simulate.")
parser.add_argument("--task", type=str, default=None, help="Name of the task.")
parser.add_argument(
    "--agent", type=str, default="rsl_rl_cfg_entry_point", help="Name of the RL agent configuration entry point."
)
parser.add_argument("--seed", type=int, default=None, help="Seed used for the environment")
parser.add_argument("--max_iterations", type=int, default=None, help="RL Policy training iterations.")
parser.add_argument(
    "--distributed", action="store_true", default=False, help="Run training with multiple GPUs or nodes."
)
parser.add_argument("--export_io_descriptors", action="store_true", default=False, help="Export IO descriptors.")
# append RSL-RL cli arguments
cli_args.add_rsl_rl_args(parser)
# append AppLauncher cli args
AppLauncher.add_app_launcher_args(parser)
args_cli, hydra_args = parser.parse_known_args()

# always enable cameras to record video
if args_cli.video:
    args_cli.enable_cameras = True

# clear out sys.argv for Hydra
sys.argv = [sys.argv[0]] + hydra_args

# launch omniverse app
app_launcher = AppLauncher(args_cli)
simulation_app = app_launcher.app

"""Check for minimum supported RSL-RL version."""

import importlib.metadata as metadata
import platform

from packaging import version

# for distributed training, check minimum supported rsl-rl version
RSL_RL_VERSION = "2.3.1"
installed_version = metadata.version("rsl-rl-lib")
if args_cli.distributed and version.parse(installed_version) < version.parse(RSL_RL_VERSION):
    if platform.system() == "Windows":
        cmd = [r".\isaaclab.bat", "-p", "-m", "pip", "install", f"rsl-rl-lib=={RSL_RL_VERSION}"]
    else:
        cmd = ["./isaaclab.sh", "-p", "-m", "pip", "install", f"rsl-rl-lib=={RSL_RL_VERSION}"]
    print(
        f"Please install the correct version of RSL-RL.\nExisting version is: '{installed_version}'"
        f" and required version is: '{RSL_RL_VERSION}'.\nTo install the correct version, run:"
        f"\n\n\t{' '.join(cmd)}\n"
    )
    exit(1)

"""Rest everything follows."""

import gymnasium as gym
import os
import torch
from datetime import datetime

import omni

# --- ✅ 在導入 RSL-RL 之前進行 Monkey patch ---
import rsl_rl.utils

# 注意：rsl_rl.utils.resolve_obs_groups 在當前版本中不存在，跳過保存
# _original_resolve_obs_groups = rsl_rl.utils.resolve_obs_groups

def _patched_resolve_obs_groups(obs, obs_groups, default_sets):
    """修補版本：處理 tuple 格式的觀測"""
    print(f"[DEBUG] resolve_obs_groups called with obs type: {type(obs)}")
    
    # 如果 obs 是 tuple（Gymnasium 新 API），提取第一個元素
    if isinstance(obs, tuple):
        obs = obs[0] if len(obs) > 0 else {}
        print(f"[DEBUG] resolve_obs_groups received tuple, extracted: {type(obs)}")
    
    # 如果 obs 是 tensor，轉換為字典格式
    if isinstance(obs, torch.Tensor):
        obs = {"policy": obs}
        print(f"[DEBUG] resolve_obs_groups received tensor, wrapped as dict")
    
    # 如果 obs 還不是字典，創建字典結構
    if not isinstance(obs, dict):
        obs = {"policy": obs} if obs is not None else {"policy": None}
        print(f"[DEBUG] resolve_obs_groups wrapped non-dict as dict")
    
    print(f"[DEBUG] Calling original resolve_obs_groups with obs type: {type(obs)}, keys: {list(obs.keys()) if isinstance(obs, dict) else 'N/A'}")
    return _original_resolve_obs_groups(obs, obs_groups, default_sets)

# 全域觀測修正函數 - 確保任何觀測都是字典格式
def _fix_obs_format(obs):
    """統一的觀測格式修正函數"""
    if isinstance(obs, tuple):
        obs = obs[0] if len(obs) > 0 else {}
        print(f"[DEBUG] Fixed tuple obs to: {type(obs)}")
    if isinstance(obs, torch.Tensor):
        obs = {"policy": obs}
        print(f"[DEBUG] Fixed tensor obs to dict")
    if not isinstance(obs, dict):
        obs = {"policy": obs} if obs is not None else {"policy": None}
        print(f"[DEBUG] Fixed non-dict obs to dict")
    return obs

# 在導入 OnPolicyRunner 之前應用 patch
rsl_rl.utils.resolve_obs_groups = _patched_resolve_obs_groups

from rsl_rl.runners import OnPolicyRunner

# --- ✅ 進一步 Monkey Patch OnPolicyRunner._construct_algorithm 以修正觀測格式 ---
_original_construct_algorithm = OnPolicyRunner._construct_algorithm

def _patched_construct_algorithm(self, obs):
    """修補 OnPolicyRunner._construct_algorithm 以處理觀測格式"""
    print(f"[DEBUG] _construct_algorithm called with obs type: {type(obs)}")
    
    # 修正觀測格式
    fixed_obs = _fix_obs_format(obs)
    print(f"[DEBUG] _construct_algorithm fixed obs type: {type(fixed_obs)}")
    
    # 調用原始方法，使用修正後的觀測
    return _original_construct_algorithm(self, fixed_obs)

# 應用 _construct_algorithm patch
OnPolicyRunner._construct_algorithm = _patched_construct_algorithm

from isaaclab.envs import (
    DirectMARLEnv,
    DirectMARLEnvCfg,
    DirectRLEnvCfg,
    ManagerBasedRLEnvCfg,
    multi_agent_to_single_agent,
)
from isaaclab.utils.dict import print_dict
from isaaclab.utils.io import dump_pickle, dump_yaml

from isaaclab_rl.rsl_rl import RslRlOnPolicyRunnerCfg, RslRlVecEnvWrapper

import isaaclab_tasks  # noqa: F401
from isaaclab_tasks.utils import get_checkpoint_path
from isaaclab_tasks.utils.hydra import hydra_task_config

# PLACEHOLDER: Extension template (do not remove this comment)

torch.backends.cuda.matmul.allow_tf32 = True
torch.backends.cudnn.allow_tf32 = True
torch.backends.cudnn.deterministic = False
torch.backends.cudnn.benchmark = False


@hydra_task_config(args_cli.task, args_cli.agent)
def main(env_cfg: ManagerBasedRLEnvCfg | DirectRLEnvCfg | DirectMARLEnvCfg, agent_cfg: RslRlOnPolicyRunnerCfg):
    """Train with RSL-RL agent."""
    # override configurations with non-hydra CLI arguments
    agent_cfg = cli_args.update_rsl_rl_cfg(agent_cfg, args_cli)
    env_cfg.scene.num_envs = args_cli.num_envs if args_cli.num_envs is not None else env_cfg.scene.num_envs
    agent_cfg.max_iterations = (
        args_cli.max_iterations if args_cli.max_iterations is not None else agent_cfg.max_iterations
    )

    # set the environment seed
    # note: certain randomizations occur in the environment initialization so we set the seed here
    env_cfg.seed = agent_cfg.seed
    env_cfg.sim.device = args_cli.device if args_cli.device is not None else env_cfg.sim.device

    # multi-gpu training configuration
    if args_cli.distributed:
        env_cfg.sim.device = f"cuda:{app_launcher.local_rank}"
        agent_cfg.device = f"cuda:{app_launcher.local_rank}"

        # set seed to have diversity in different threads
        seed = agent_cfg.seed + app_launcher.local_rank
        env_cfg.seed = seed
        agent_cfg.seed = seed

    # specify directory for logging experiments
    log_root_path = os.path.join("logs", "rsl_rl", agent_cfg.experiment_name)
    log_root_path = os.path.abspath(log_root_path)
    print(f"[INFO] Logging experiment in directory: {log_root_path}")
    # specify directory for logging runs: {time-stamp}_{run_name}
    log_dir = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
    # The Ray Tune workflow extracts experiment name using the logging line below, hence, do not change it (see PR #2346, comment-2819298849)
    print(f"Exact experiment name requested from command line: {log_dir}")
    if agent_cfg.run_name:
        log_dir += f"_{agent_cfg.run_name}"
    log_dir = os.path.join(log_root_path, log_dir)

    # set the IO descriptors output directory if requested
    if isinstance(env_cfg, ManagerBasedRLEnvCfg):
        env_cfg.export_io_descriptors = args_cli.export_io_descriptors
        env_cfg.io_descriptors_output_dir = log_dir
    else:
        omni.log.warn(
            "IO descriptors are only supported for manager based RL environments. No IO descriptors will be exported."
        )

    # create isaac environment
    env = gym.make(args_cli.task, cfg=env_cfg, render_mode="rgb_array" if args_cli.video else None)

    # convert to single-agent instance if required by the RL algorithm
    if isinstance(env.unwrapped, DirectMARLEnv):
        env = multi_agent_to_single_agent(env)

    # save resume path before creating a new log_dir
    if agent_cfg.resume or agent_cfg.algorithm.class_name == "Distillation":
        resume_path = get_checkpoint_path(log_root_path, agent_cfg.load_run, agent_cfg.load_checkpoint)

    # wrap for video recording
    if args_cli.video:
        video_kwargs = {
            "video_folder": os.path.join(log_dir, "videos", "train"),
            "step_trigger": lambda step: step % args_cli.video_interval == 0,
            "video_length": args_cli.video_length,
            "disable_logger": True,
        }
        print("[INFO] Recording videos during training.")
        print_dict(video_kwargs, nesting=4)
        env = gym.wrappers.RecordVideo(env, **video_kwargs)

    # wrap around environment for rsl-rl
    env = RslRlVecEnvWrapper(env, clip_actions=agent_cfg.clip_actions)
    
    # --- ✅ 修補 RslRlVecEnvWrapper.get_observations 以確保返回正確格式 ---
    original_get_observations = env.get_observations
    
    def patched_get_observations():
        """修補版本：確保 get_observations 返回正確的字典格式"""
        obs = original_get_observations()
        print(f"[DEBUG] env.get_observations() returned type: {type(obs)}")
        
        # 如果是 tuple，提取第一個元素（實際觀測）
        if isinstance(obs, tuple):
            obs = obs[0] if len(obs) > 0 else None
            print(f"[DEBUG] Extracted obs from tuple: {type(obs)}")
        
        # 詳細檢查觀測類型
        print(f"[DEBUG] After extraction, obs type: {type(obs)}, is dict: {isinstance(obs, dict)}")
        
        # 強制包裝為字典格式（RSL-RL 期待的格式）
        if not isinstance(obs, dict):
            print(f"[DEBUG] Converting {type(obs)} to dict format")
            obs = {"policy": obs}
            print(f"[DEBUG] Successfully wrapped as dict with keys: {list(obs.keys())}")
        else:
            print(f"[DEBUG] Obs is already dict with keys: {list(obs.keys())}")
            
        return obs
    
    # 應用修補
    env.get_observations = patched_get_observations

    # --- ✅ 修補 RSL-RL obs_groups 配置問題 (Isaac Sim 5.0 / RSL-RL 2.x 相容性) ---
    agent_dict = agent_cfg.to_dict() if hasattr(agent_cfg, "to_dict") else dict(agent_cfg)
    
    # 修復觀測空間結構 - RSL-RL 需要字典格式的觀測空間
    # 從環境的 observation_space 提取結構信息
    if hasattr(env, "observation_space") and isinstance(env.observation_space, gym.spaces.Dict):
        obs_space_dict = {key: space for key, space in env.observation_space.spaces.items()}
        print(f"[DEBUG] Extracted observation space keys: {list(obs_space_dict.keys())}")
    else:
        obs_space_dict = {"policy": env.observation_space}
        print("[DEBUG] Wrapped single observation space as 'policy'")
    
    # 若 obs_groups 為 None 或不存在，手動補上
    if agent_dict.get("obs_groups", None) is None:
        agent_dict["obs_groups"] = {"policy": ["policy"]}
        print("[DEBUG] obs_groups was None, set to: {'policy': ['policy']}")
    
    # 若仍沒有 key "policy"，也強制補齊
    elif "policy" not in agent_dict["obs_groups"]:
        agent_dict["obs_groups"]["policy"] = ["policy"]
        print("[DEBUG] Added 'policy' key to obs_groups")
    
    print(f"[DEBUG] Final agent_dict obs_groups: {agent_dict['obs_groups']}")
    
    # create runner from rsl-rl (monkey patch 已在模組導入時應用)
    runner = OnPolicyRunner(env, agent_dict, log_dir=log_dir, device=agent_cfg.device)
    # write git state to logs
    runner.add_git_repo_to_log(__file__)
    # load the checkpoint
    if agent_cfg.resume or agent_cfg.algorithm.class_name == "Distillation":
        print(f"[INFO]: Loading model checkpoint from: {resume_path}")
        # load previously trained model
        runner.load(resume_path)

    # dump the configuration into log-directory
    dump_yaml(os.path.join(log_dir, "params", "env.yaml"), env_cfg)
    dump_yaml(os.path.join(log_dir, "params", "agent.yaml"), agent_cfg)
    dump_pickle(os.path.join(log_dir, "params", "env.pkl"), env_cfg)
    dump_pickle(os.path.join(log_dir, "params", "agent.pkl"), agent_cfg)

    # run training
    runner.learn(num_learning_iterations=agent_cfg.max_iterations, init_at_random_ep_len=True)

    # close the simulator
    env.close()


if __name__ == "__main__":
    # run the main function
    main()
    # close sim app
    simulation_app.close()
