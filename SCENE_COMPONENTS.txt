╔══════════════════════════════════════════════════════════════════╗
║        🎬 Nova Carter 訓練模擬場景組件圖                         ║
╚══════════════════════════════════════════════════════════════════╝

場景俯視圖 (40m × 40m):
═══════════════════════════════════════════════════════════════════

                    -20m         0         +20m
                      │          │          │
         +20m    ─────┼──────────┼──────────┼─────
                      │          │          │
                      │    🚧    │          │
                      │ [靜態]   │          │
                      │  障礙    │          │
                      │          │          │
            0    ─────┼──────🤖──┼─────🎯───┼─────
                      │   Nova   │  目標    │
                      │  Carter  │ (綠球)   │
                      │          │  8m      │
                      │    🔴    │          │
                      │ [動態]   │          │
        -20m    ─────┼──────────┼──────────┼─────
                      │  障礙    │          │


圖例:
─────────────────────────────────────────────────────────
🤖  Nova Carter (0,0,0)        - 差速驅動機器人
📡  360° LiDAR (安裝在機器人上) - 10米檢測範圍
🎯  目標標記 (8,0,0.3)         - 綠色球體 (可視化用)
🚧  靜態障礙 (5,0,1)           - 方塊 (0.2m³)
🔴  動態障礙 (3,3,1)           - 紅色球體 (r=0.5m)
🌍  地面 (40m×40m)             - 平坦地形


═══════════════════════════════════════════════════════════════════
🎯 核心 USD 模型
═══════════════════════════════════════════════════════════════════

1️⃣ Nova Carter 機器人 ⭐
   📁 /home/aa/isaacsim/usd/nova_carter.usd
   
   結構:
   Robot/
   └─ Robot/
      └─ chassis_link/
         ├─ base_link/  ←─── 📡 LiDAR 安裝點
         ├─ joint_wheel_left   ⚙️ 左主輪
         ├─ joint_wheel_right  ⚙️ 右主輪
         ├─ joint_caster_*     🔄 萬向輪
         └─ joint_swing_*      🔄 懸吊輪

   規格:
   ├─ 驅動方式: 差速驅動
   ├─ 輪半徑: 0.125m
   ├─ 輪距: 0.413m
   ├─ 最大線速度: 2.0 m/s
   └─ 最大角速度: π rad/s

2️⃣ 靜態障礙物（方塊）
   📁 ${ISAAC_NUCLEUS_DIR}/Props/Blocks/DexCube/
      dex_cube_instanceable.usd
   
   ├─ 原始大小: 0.1m³
   ├─ 縮放: 2.0x → 0.2m³
   └─ 隨機位置: x∈(2,8)m, y∈(-4,4)m

3️⃣ 動態障礙物（球體）
   🔧 程序化生成（不使用USD）
   
   ├─ 類型: Sphere
   ├─ 半徑: 0.5m
   ├─ 質量: 1.0kg
   ├─ 顏色: 紅色
   └─ 可被推動、碰撞

4️⃣ 目標標記（球體）
   🔧 程序化生成
   
   ├─ 類型: Kinematic Sphere
   ├─ 半徑: 0.3m
   ├─ 顏色: 綠色
   └─ 無碰撞（僅視覺化）

5️⃣ 地形
   🔧 程序化生成
   
   ├─ 類型: 平面
   ├─ 大小: 40m × 40m
   ├─ 靜摩擦: 1.0
   └─ 動摩擦: 1.0


═══════════════════════════════════════════════════════════════════
📡 LiDAR 感測器詳解
═══════════════════════════════════════════════════════════════════

類型: RayCaster (光線投射)

掃描示意圖:
                    
              0° (前方)
                 │
                 │
        -90° ────┼──── +90°
                 │
                 │
              ±180° (後方)

參數:
├─ 光線數量: 360 條
├─ 角度範圍: -180° ~ +180°
├─ 解析度: 1.0° (每度一條)
├─ 最大距離: 10.0m
├─ 輸出: 360維距離向量

輸出示例:
[9.8, 9.9, 10.0, 10.0, ..., 2.5, 2.4, ..., 10.0]
  0°   1°    2°    3°      90°   91°     180°
 (前) (前右)               (左)  (左後)  (後)


═══════════════════════════════════════════════════════════════════
🎮 場景參數配置
═══════════════════════════════════════════════════════════════════

# 在 local_planner_env_cfg.py 中修改

場景大小:
  scene.num_envs = 4              # 並行環境數
  scene.env_spacing = 15.0        # 環境間距

機器人性能:
  max_linear_speed = 2.0          # 線速度上限 (m/s)
  max_angular_speed = π           # 角速度上限 (rad/s)
  wheel_radius = 0.125            # 輪半徑 (m)
  wheel_base = 0.413              # 輪距 (m)

LiDAR 配置:
  horizontal_fov = (-180, 180)    # 掃描角度
  horizontal_res = 1.0            # 解析度 (度)
  max_distance = 10.0             # 最大距離 (m)
  channels = 1                    # 2D LiDAR

障礙物數量:
  static_obstacles: 1             # 靜態障礙物
  dynamic_obstacles: 1            # 動態障礙物

任務設置:
  episode_length_s = 30.0         # Episode 時長
  goal_distance = (5.0, 10.0)     # 目標距離範圍


═══════════════════════════════════════════════════════════════════
🔄 場景運作流程
═══════════════════════════════════════════════════════════════════

Episode 開始:
  1. 重置機器人 → 隨機位置+朝向
  2. 生成目標   → 距離 5-10m
  3. 重置障礙物 → 隨機分布
  4. 更新標記   → 綠球移到目標

每個時間步 (0.01秒):
  1. LiDAR 掃描  → 360個距離值
  2. 獲取觀測    → LiDAR + 目標 + 速度
  3. 策略決策    → 輸出 [v_linear, v_angular]
  4. 差速轉換    → 計算左右輪速度
  5. 物理模擬    → 更新機器人位置
  6. 計算獎勵    → 根據行為給獎勵/懲罰
  7. 檢查終止    → 到達/碰撞/超時?

Episode 結束:
  → 記錄數據，返回步驟1


═══════════════════════════════════════════════════════════════════
📚 USD 文件路徑
═══════════════════════════════════════════════════════════════════

Nova Carter:
  /home/aa/isaacsim/usd/nova_carter.usd

Isaac Sim 資源庫:
  ${ISAAC_NUCLEUS_DIR}/Props/Blocks/DexCube/dex_cube_instanceable.usd
  
  其他可用資源:
  - Props/Blocks/         # 各種方塊
  - Props/Shapes/         # 基本形狀
  - Environments/Grid/    # 網格地面
  - Robots/               # 各種機器人


═══════════════════════════════════════════════════════════════════
💡 自定義場景提示
═══════════════════════════════════════════════════════════════════

更換機器人:
  usd_path="/path/to/your_robot.usd"

添加障礙物:
  創建新的 RigidObjectCfg
  指定 USD 路徑或程序化生成

更改地形:
  使用 TerrainImporterCfg
  支持隨機地形、斜坡等

調整難度:
  - 增加障礙物數量
  - 縮短 episode 時間
  - 增大目標距離


═══════════════════════════════════════════════════════════════════
📖 詳細文檔: md/SIMULATION_SCENE_DESIGN.md
═══════════════════════════════════════════════════════════════════
